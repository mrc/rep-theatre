* rep-theatre
Utils I wanted to put somewhere. If any set grows too large it should
be split into its own system, so don't depend on anything remaining
here between versions.

* Examples
Samples should show up in the tests (t-*). I don't want to spend too
much time documenting these bits and pieces here because this system
is really just a transitional residence.

** most
~most~ is like argmax. Give it a function (key) and a sequence, and
maybe a test like #'< if you want argmin, and it will return the item
which maximises the function.

It actually returns multiple values with the item, the value (i.e. the
result of applying the function) and the position of the item in the
list.

#+BEGIN_SRC lisp
  (most '("a" "william" "power" "mystery") :key #'scrabble-score)
  => "mystery"
  => 15
  => 3
#+END_SRC

** make-laplace-smoother
~make-laplace-smoother~ generates a function which applies add-k
smoothing to its input.

#+BEGIN_SRC lisp
(let ((smoother (rep-theatre:make-laplace-smoother
                 100 2 1)))
  (format t "smoothed 0/100: ~A, smoothed 100/100: ~A, smoothed 50/100: ~A~%"
          (funcall smoother 0)
          (funcall smoother 100)
          (funcall smoother 50)))
=> smoothed 0/100: 1/102, smoothed 100/100: 101/102, smoothed 50/100: 1/2

(let ((smoother (rep-theatre:make-laplace-smoother
                 100 2 1)))
  (format t "smoothed 0/100: ~F, smoothed 100/100: ~F, smoothed 50/100: ~F~%"
          (funcall smoother 0)
          (funcall smoother 100)
          (funcall smoother 50)))
=> smoothed 0/100: 0.009803922, smoothed 100/100: 0.99019605, smoothed 50/100: 0.5
#+END_SRC

* Use
Add the project to your asdf search path (e.g. ~(push #P"../rep-theatre/"
asdf:*central-registry*)~) then:
#+BEGIN_SRC lisp
  (ql:quickload :rep-theatre)
#+END_SRC

* Test
#+BEGIN_SRC lisp
  (ql:quickload :rep-theatre-tests)
  (t-rep-theatre:test-all)
#+END_SRC
